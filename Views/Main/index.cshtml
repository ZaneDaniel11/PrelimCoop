@model List<PrelimCoop.Entities.ClientsInfoTb>;
  
<style>
  .button-container
  {
    display:flex;
    
  }
  .button-container a 
  {
    margin-left: 20px;
  }

</style>

<h3>list of Books</h3>
<a class="btn btn-success" href="../main/create">Create New</a>

<table id="list-table" class="display" style="width:100%">
        <thead>
            <tr>
               <th>#</th>
                <th>User Type</th>
                <th>Full Name</th>
                <th>Age</th>
                <th>Address</th>
                <th>Zip Code</th>
                <th>Occupation</th>
                <th>Operation</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in Model)
    {
       <div class="ParentUserContainer">
          <div class="userContainer">
            <tr class="">
                <td>@client.Id</td>
                <td>@client.UserType</td>
                <td>@client.FullName @client.LastName</td>
                <td>@client.Age</td>
                <td>@client.Address</td>
                <td>@client.ZipCode</td>
                <td>@client.Occupation</td>
                 <td>
                  <div class="button-container">
                  <a href="/main/update/@client.Id"><i class="bi bi-arrow-up-circle-fill" style="color: blue;"></i></a>
                  <a  href="/main/delete/@client.Id"><i class="bi bi-trash"style="color: red; "></i></a> 
                 <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#LoanModal" onclick="updateClientInfo('@client.Id', '@client.FullName @client.LastName')">Make Loan</button>
                 </div>
                 </td>
            </tr>
          </div>
          </div>
    }
   </tbody>
    </table>

<div class="modal fade" id="LoanModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="staticBackdropLabel">Laon For</h1><h1 id="clientInfo"></h1> 
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">

        <form action="">
          <input type="text" id="clientId">

          <div class="row g-3">
          <div class="col">
              <label for="">Client</label>
              <input type="text" class="form-control" placeholder="Client">
          </div>
          <div class="col">
              <label for="">Status</label>
              <input type="text" class="form-control" placeholder="Status">
          </div>
        </div>

        <div class="row g-3">
          <div class="col">
              <label for="">Amount</label>
              <input type="text" class="form-control" placeholder="Amount" id="amount">
          </div>
           <div class="col">
            <label for="">No of Payment</label>
            <input type="text" class="form-control" placeholder="Enter Number of Payment" id="noOfPayment" onchange="calculateDueDate()">
          </div>
        </div>

        <div class="row g-3">
          <div class="col">
              <label for="">Deduction</label>
              <input type="text" class="form-control" placeholder="Enter Deduction" id="deduction">
          </div>
           <div class="col">
              <label for="">Type</label>
              <select id="typeofPayment" name="type" onchange="calculateDueDate()">
                <option value="0.1">Daily</option>
                <option value="0.3">Weekly</option>
                <option value="0.5">Monthly</option>
              </select>
            </div>
        </div>

        <div class="row g-3">
          <div class="col">
              <label for="">Interest</label>
              <input type="text" class="form-control" placeholder="Interest"  id="interest">
          </div>
          <div class="col">
              <label for="">Date Created</label>
              <input type="text" class="form-control" placeholder="Enter Number of Payment" type="date" class="form-row" value="@DateTime.Now.ToString("yyyy-MM-dd")" readonly />
          </div>
        </div>

        <div class="row g-3">
          <div class="col">
              <label for="">Reciebale Amount</label>
              <input type="text" class="form-control" placeholder="Recievable Amount" id="receivableAmount" type="number">
          </div>
        <div class="col">
          <label for="">Due Date</label>
          <input type="text" class="form-control" placeholder="Enter Number of Payment" id="dueDate" readonly>
        </div>
        </div>
        <div class="row g-3">
          <div class="col">
              <label for="">Payable Amount</label>
              <input type="text" class="form-control" placeholder="Recievable Amount" id="payableAmount" type="number">
          </div>
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>          

        </form>
       
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Understood</button>
      </div>
    </div>
  </div>
</div>


<script>
 
  function updateClientInfo(clientId, clientName) {
    document.getElementById('clientId').value = clientId;
    document.getElementById('clientInfo').textContent = clientName;
  }


   const typeSelect = document.getElementById('typeofPayment');
   const interestInput = document.getElementById('interest');
   const noOfPaymentInput = document.getElementById('noOfPayment');
   const deductionInput = document.getElementById('deduction');
   const amountInput = document.getElementById('amount');
   const receivableAmountInput = document.getElementById('receivableAmount');
   const payableAmountInput = document.getElementById('payableAmount');

   typeSelect.addEventListener('change', function() {
    const selectedType = parseFloat(this.value);
    let defaultInterest = 0;

    if (selectedType === 0.1) {
        defaultInterest = 0.01; 
    } else if (selectedType === 0.3) {
        defaultInterest = 0.03;
    } else if (selectedType === 0.5) {
        defaultInterest = 0.05;
    }

    const calculatedInterest = defaultInterest;
    interestInput.value = calculatedInterest.toFixed(2);

    const noOfPayment = parseFloat(noOfPaymentInput.value);
    const amount = parseFloat(amountInput.value);
    const deduction = parseFloat(deductionInput.value); // Added deduction calculation

    const receivableAmount = amount;
    receivableAmountInput.value = receivableAmount.toFixed(2);

    // Calculate the interest amount and add deduction
    const interestAmount = amount * calculatedInterest * noOfPayment;
    const payableAmount = amount + interestAmount + deduction; // Include deduction
    payableAmountInput.value = payableAmount.toFixed(2);
});



  function calculateDueDate() {
  const typeSelect = document.getElementById('typeofPayment');
  const noOfPaymentInput = document.getElementById('noOfPayment');
  const dueDateInput = document.getElementById('dueDate');

  const selectedType = parseFloat(typeSelect.value);
  const noOfPayment = parseInt(noOfPaymentInput.value);

  if (selectedType === 0.1) { // Daily
    const currentDate = new Date();
    currentDate.setDate(currentDate.getDate() + noOfPayment);
    dueDateInput.value = currentDate.toISOString().split('T')[0];
  } else if (selectedType === 0.3) { // Weekly
    const currentDate = new Date();
    currentDate.setDate(currentDate.getDate() + noOfPayment * 7);
    dueDateInput.value = currentDate.toISOString().split('T')[0];
  } else if (selectedType === 0.5) { // Monthly
    const currentDate = new Date();
    currentDate.setMonth(currentDate.getMonth() + noOfPayment);
    dueDateInput.value = currentDate.toISOString().split('T')[0];
  }
}


</script>